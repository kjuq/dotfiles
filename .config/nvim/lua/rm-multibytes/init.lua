-- TODO: Dot repeat of Visual mode is not implemented yet

---@alias kjuq.rm-multibytes.mapping table<string, string>

---@class kjuq.rm-multibytes.opts
---@field cmd string
---@field maps kjuq.rm-multibytes.mapping

local M = {}

---@type kjuq.rm-multibytes.mapping
local maps = {
	-- [ [[、]] ] = [[,]],
	-- [ [[。]] ] = [[.]],
	[ [[　]] ] = [[ ]], -- full-width space
	[ [[，]] ] = [[、]],
	[ [[．]] ] = [[。]],
	[ [[（]] ] = [[(]],
	[ [[）]] ] = [[)]],
	[ [[：]] ] = [[:]],

	[ [[１]] ] = [[1]],
	[ [[２]] ] = [[2]],
	[ [[３]] ] = [[3]],
	[ [[４]] ] = [[4]],
	[ [[５]] ] = [[5]],
	[ [[６]] ] = [[6]],
	[ [[７]] ] = [[7]],
	[ [[８]] ] = [[8]],
	[ [[９]] ] = [[9]],
	[ [[０]] ] = [[0]],

	[ [[①]] ] = [[1]],
	[ [[②]] ] = [[2]],
	[ [[③]] ] = [[3]],
	[ [[④]] ] = [[4]],
	[ [[⑤]] ] = [[5]],
	[ [[⑥]] ] = [[6]],
	[ [[⑦]] ] = [[7]],
	[ [[⑧]] ] = [[8]],
	[ [[⑨]] ] = [[9]],
	[ [[⑩]] ] = [[10]],
	[ [[⑪]] ] = [[11]],
	[ [[⑫]] ] = [[12]],
	[ [[⑬]] ] = [[13]],
	[ [[⑭]] ] = [[14]],
	[ [[⑮]] ] = [[15]],
	[ [[⑯]] ] = [[16]],
	[ [[⑰]] ] = [[17]],
	[ [[⑱]] ] = [[18]],
	[ [[⑲]] ] = [[19]],
	[ [[⑳]] ] = [[20]],

	[ [[⑴]] ] = [[(1)]],
	[ [[⑵]] ] = [[(2)]],
	[ [[⑶]] ] = [[(3)]],
	[ [[⑷]] ] = [[(4)]],
	[ [[⑸]] ] = [[(5)]],
	[ [[⑹]] ] = [[(6)]],
	[ [[⑺]] ] = [[(7)]],
	[ [[⑻]] ] = [[(8)]],
	[ [[⑼]] ] = [[(9)]],
	[ [[⑽]] ] = [[(10)]],
	[ [[⑾]] ] = [[(11)]],
	[ [[⑿]] ] = [[(12)]],
	[ [[⒀]] ] = [[(13)]],
	[ [[⒁]] ] = [[(14)]],
	[ [[⒂]] ] = [[(15)]],
	[ [[⒃]] ] = [[(16)]],
	[ [[⒄]] ] = [[(17)]],
	[ [[⒅]] ] = [[(18)]],
	[ [[⒆]] ] = [[(19)]],
	[ [[⒇]] ] = [[(20)]],

	[ [[⒈]] ] = [[1.]],
	[ [[⒉]] ] = [[2.]],
	[ [[⒊]] ] = [[3.]],
	[ [[⒋]] ] = [[4.]],
	[ [[⒌]] ] = [[5.]],
	[ [[⒍]] ] = [[6.]],
	[ [[⒎]] ] = [[7.]],
	[ [[⒏]] ] = [[8.]],
	[ [[⒐]] ] = [[9.]],
	[ [[⒑]] ] = [[10.]],
	[ [[⒒]] ] = [[11.]],
	[ [[⒓]] ] = [[12.]],
	[ [[⒔]] ] = [[13.]],
	[ [[⒕]] ] = [[14.]],
	[ [[⒖]] ] = [[15.]],
	[ [[⒗]] ] = [[16.]],
	[ [[⒘]] ] = [[17.]],
	[ [[⒙]] ] = [[18.]],
	[ [[⒚]] ] = [[19.]],
	[ [[⒛]] ] = [[20.]],

	[ [[⒜]] ] = [[(a)]],
	[ [[⒝]] ] = [[(b)]],
	[ [[⒞]] ] = [[(c)]],
	[ [[⒟]] ] = [[(d)]],
	[ [[⒠]] ] = [[(e)]],
	[ [[⒡]] ] = [[(f)]],
	[ [[⒢]] ] = [[(g)]],
	[ [[⒣]] ] = [[(h)]],
	[ [[⒤]] ] = [[(i)]],
	[ [[⒥]] ] = [[(j)]],
	[ [[⒦]] ] = [[(k)]],
	[ [[⒧]] ] = [[(l)]],
	[ [[⒨]] ] = [[(m)]],
	[ [[⒩]] ] = [[(n)]],
	[ [[⒪]] ] = [[(o)]],
	[ [[⒫]] ] = [[(p)]],
	[ [[⒬]] ] = [[(q)]],
	[ [[⒭]] ] = [[(r)]],
	[ [[⒮]] ] = [[(s)]],
	[ [[⒯]] ] = [[(t)]],
	[ [[⒰]] ] = [[(u)]],
	[ [[⒱]] ] = [[(v)]],
	[ [[⒲]] ] = [[(w)]],
	[ [[⒳]] ] = [[(x)]],
	[ [[⒴]] ] = [[(y)]],
	[ [[⒵]] ] = [[(z)]],

	[ [[Ⓐ]] ] = [[a]],
	[ [[Ⓑ]] ] = [[b]],
	[ [[Ⓒ]] ] = [[c]],
	[ [[Ⓓ]] ] = [[d]],
	[ [[Ⓔ]] ] = [[e]],
	[ [[Ⓕ]] ] = [[f]],
	[ [[Ⓖ]] ] = [[g]],
	[ [[Ⓗ]] ] = [[h]],
	[ [[Ⓘ]] ] = [[i]],
	[ [[Ⓙ]] ] = [[j]],
	[ [[Ⓚ]] ] = [[k]],
	[ [[Ⓛ]] ] = [[l]],
	[ [[Ⓜ]] ] = [[m]],
	[ [[Ⓝ]] ] = [[n]],
	[ [[Ⓞ]] ] = [[o]],
	[ [[Ⓟ]] ] = [[p]],
	[ [[Ⓠ]] ] = [[q]],
	[ [[Ⓡ]] ] = [[r]],
	[ [[Ⓢ]] ] = [[s]],
	[ [[Ⓣ]] ] = [[t]],
	[ [[Ⓤ]] ] = [[u]],
	[ [[Ⓥ]] ] = [[v]],
	[ [[Ⓦ]] ] = [[w]],
	[ [[Ⓧ]] ] = [[x]],
	[ [[Ⓨ]] ] = [[y]],
	[ [[Ⓩ]] ] = [[z]],

	[ [[ⓐ]] ] = [[a]],
	[ [[ⓑ]] ] = [[b]],
	[ [[ⓒ]] ] = [[c]],
	[ [[ⓓ]] ] = [[d]],
	[ [[ⓔ]] ] = [[e]],
	[ [[ⓕ]] ] = [[f]],
	[ [[ⓖ]] ] = [[g]],
	[ [[ⓗ]] ] = [[h]],
	[ [[ⓘ]] ] = [[i]],
	[ [[ⓙ]] ] = [[j]],
	[ [[ⓚ]] ] = [[k]],
	[ [[ⓛ]] ] = [[l]],
	[ [[ⓜ]] ] = [[m]],
	[ [[ⓝ]] ] = [[n]],
	[ [[ⓞ]] ] = [[o]],
	[ [[ⓟ]] ] = [[p]],
	[ [[ⓠ]] ] = [[q]],
	[ [[ⓡ]] ] = [[r]],
	[ [[ⓢ]] ] = [[s]],
	[ [[ⓣ]] ] = [[t]],
	[ [[ⓤ]] ] = [[u]],
	[ [[ⓥ]] ] = [[v]],
	[ [[ⓦ]] ] = [[w]],
	[ [[ⓧ]] ] = [[x]],
	[ [[ⓨ]] ] = [[y]],
	[ [[ⓩ]] ] = [[z]],

	[ [[⓿]] ] = [[0]],
	[ [[⓫]] ] = [[11]],
	[ [[⓬]] ] = [[12]],
	[ [[⓭]] ] = [[13]],
	[ [[⓮]] ] = [[14]],
	[ [[⓯]] ] = [[15]],
	[ [[⓰]] ] = [[16]],
	[ [[⓱]] ] = [[17]],
	[ [[⓲]] ] = [[18]],
	[ [[⓳]] ] = [[19]],
	[ [[⓴]] ] = [[20]],

	[ [[⓪]] ] = [[0]],
	[ [[⓵]] ] = [[1]],
	[ [[⓶]] ] = [[2]],
	[ [[⓷]] ] = [[3]],
	[ [[⓸]] ] = [[4]],
	[ [[⓹]] ] = [[5]],
	[ [[⓺]] ] = [[6]],
	[ [[⓻]] ] = [[7]],
	[ [[⓼]] ] = [[8]],
	[ [[⓽]] ] = [[9]],
	[ [[⓾]] ] = [[10]],

	[ [[‘]] ] = [[']],
	[ [[’]] ] = [[']],
	[ [[‚]] ] = [[']],
	[ [[‛]] ] = [[']],
	[ [[“]] ] = [["]],
	[ [[”]] ] = [["]],
	[ [[„]] ] = [["]],
	[ [[‟]] ] = [["]],
	[ [[Ⅰ]] ] = [[I]],
	[ [[Ⅱ]] ] = [[II]],
	[ [[Ⅲ]] ] = [[III]],
	[ [[Ⅳ]] ] = [[IV]],
	[ [[Ⅴ]] ] = [[V]],
	[ [[Ⅵ]] ] = [[VI]],
	[ [[Ⅶ]] ] = [[VII]],
	[ [[Ⅷ]] ] = [[VIII]],
	[ [[Ⅸ]] ] = [[IX]],
	[ [[Ⅹ]] ] = [[X]],
	[ [[Ⅺ]] ] = [[XI]],
	[ [[Ⅻ]] ] = [[XII]],
	[ [[ⅰ]] ] = [[i]],
	[ [[ⅱ]] ] = [[ii]],
	[ [[ⅲ]] ] = [[iii]],
	[ [[ⅳ]] ] = [[iv]],
	[ [[ⅴ]] ] = [[v]],
	[ [[ⅵ]] ] = [[vi]],
	[ [[ⅶ]] ] = [[vii]],
	[ [[ⅷ]] ] = [[viii]],
	[ [[ⅸ]] ] = [[ix]],
	[ [[ⅹ]] ] = [[x]],
	[ [[ⅺ]] ] = [[xi]],
	[ [[ⅻ]] ] = [[xii]],
	[ [[㈠]] ] = [[(一)]],
	[ [[㈡]] ] = [[(二)]],
	[ [[㈢]] ] = [[(三)]],
	[ [[㈣]] ] = [[(四)]],
	[ [[㈤]] ] = [[(五)]],
	[ [[㈥]] ] = [[(六)]],
	[ [[㈦]] ] = [[(七)]],
	[ [[㈧]] ] = [[(八)]],
	[ [[㈨]] ] = [[(九)]],
}

---@class kjuq.rm-multibytes.opts
local opts = {
	maps = maps,
	cmd = 'KjuqRmMB',
}

---@param pat string
---@param sub string
---@param start integer
---@param stop integer
local function substitute(pat, sub, start, stop)
	vim.cmd(string.format([[ %d,%d s/%s/%s/ge ]], start, stop, pat, sub))
end

---@param mappings kjuq.rm-multibytes.mapping
---@param start integer
---@param stop integer
local function substitute_all(mappings, start, stop)
	local reg_bak = vim.fn.getreg('/')
	for pat, sub in pairs(mappings) do
		substitute(pat, sub, start, stop)
	end
	vim.fn.setreg('/', reg_bak)
end

---@type integer, integer
local lnum, col

local function init()
	vim.api.nvim_create_user_command(opts.cmd, function(args)
		substitute_all(opts.maps, args.line1, args.line2)
	end, { range = true })

	function _G.kjuq_rm_multibytes()
		vim.cmd(string.format([[ '[,'] %s ]], opts.cmd))
		vim.api.nvim_win_set_cursor(0, { lnum, col })
	end
end

function M.map()
	local mode = vim.api.nvim_get_mode().mode:sub(1, 1)
	if not vim.tbl_contains({ 'n', 'v', 'V' }, mode) then
		vim.notify('kjuq/Rm-multibytes: Unexpected mode detected', vim.log.levels.ERROR)
		return nil
	end
	if mode == 'n' then
		local mark_cur = '.'
		lnum, col = vim.fn.line(mark_cur), vim.fn.col(mark_cur) - 1
		vim.o.operatorfunc = 'v:lua._G.kjuq_rm_multibytes'
		return 'g@'
	elseif mode == 'v' or mode == 'V' then
		vim.o.operatorfunc = nil
		return string.format([[:%s<CR>]], opts.cmd)
	end
end

function M.setup(user_opts)
	if user_opts then
		opts = vim.tbl_deep_extend('force', opts, user_opts)
	end
	init()
end

return M
