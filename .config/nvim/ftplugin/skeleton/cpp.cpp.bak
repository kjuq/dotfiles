// Template for Competitive Programming {{{
#include <bits/stdc++.h>

#define int int64_t
#define ALL(x) (x).begin(), (x).end()
#define SUM(x) std::accumulate(ALL(x), 0)

using namespace std;

template<typename T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }
template<typename T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }
template<typename T> inline void dump(T a) { cout << "[ "; for (const auto e : a) { cout << e << ", "; } cout << "]" << endl; }

int ceil(int a, int b) { return (a + (b - 1)) / b; }

const int64_t INF = (int64_t)(1e18 + 1e16) + 17;
const int dx[8] = {0, 1, -1, 0, 1, -1, 1, -1};
const int dy[8] = {1, 0, 0, -1, 1, -1, -1, 1};

class range {
private:
	struct I {
		int x;
		int operator*() { return x; }
		bool operator!=(I& lhs) { return x < lhs.x; }
		void operator++() { ++x; }
	};
	I i, n;
public:
	range(int n) : i({0}), n({n}) {}
	range(int i, int n) : i({i}), n({n}) {}
	I& begin() { return i; }
	I& end() { return n; }
};
// }}}

signed main() {
}
