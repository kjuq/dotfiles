# Setup XDG (Start) {{{

# XDG Base Directories (NEED TO LOAD FIRST!!!!)
[ -z "$XDG_CONFIG_HOME" ] && export XDG_CONFIG_HOME="$HOME/.config"
[ -z "$XDG_CACHE_HOME" ] && export XDG_CACHE_HOME="$HOME/.cache"
[ -z "$XDG_DATA_HOME" ] && export XDG_DATA_HOME="$HOME/.local/share"
[ -z "$XDG_STATE_HOME" ] && export XDG_STATE_HOME="$HOME/.local/state"

export ZDOTDIR=$XDG_CONFIG_HOME/zsh
export HISTFILE="$XDG_STATE_HOME/zsh/history"
autoload -U compinit
mkdir --parents "$XDG_CACHE_HOME/zsh" "$XDG_STATE_HOME/zsh"
compinit -d "$XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION"
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/zcompcache"

# Setup XDG (End) }}}

# Variables (Start) {{{

# User defined variables
export LOCAL_BIN_PATH="$HOME/.local/bin"

# Environment variables
export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"

export EDITOR="nvim"
export VISUAL="nvim"
export MANPAGER='nvim +Man!'

export SUDO_ASKPASS="$LOCAL_BIN_PATH/sudo_pass"

# Homebrew
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_ENV_HINTS=1

# w3m
export W3M_DIR="$XDG_CONFIG_HOME/w3m"

# rclone
export RCLONE_PROGRESS=true
export RCLONE_EXCLUDE="*.DS_Store"

# GnuPG and password-store
export PASSWORD_STORE_DIR="$HOME/password-store"
export GPG_TTY=$(tty)

# Xinit
export XINITRC="$XDG_CONFIG_HOME/X11/xinitrc"
export XSERVERRC="$XDG_CONFIG_HOME/X11/xserverrc"

# GUI toolkit
export GTK2_RC_FILES="$XDG_CONFIG_HOME/gtkrc-2.0/gtkrc"

# Defined at .profile generated by Manjaro
export QT_QPA_PLATFORMTHEME="qt5ct"

# Xauthority
export XAUTHORITY="$XDG_RUNTIME_DIR/Xauthority"

# Variables (End) }}}

# Alias (Start) {{{

# Aliases for changing directories
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias .......="cd ../../../../../.."
alias ........="cd ../../../../../../.."

# Check if `eza` command exists and create aliases accordingly
if command -v eza >/dev/null 2>&1; then
	alias ls="eza --group-directories-first --icons --classify"
	alias tree="ls --tree --level=3 --ignore-glob 'node_modules|.git|.cache'"
elif [ "$(uname)" = "Linux" ]; then
	alias ls="ls --color=auto --classify --group-directories-first"
elif [ "$(uname)" = "Darwin" ]; then
	alias ls="ls -GF"
fi

# More aliases
alias ll="ls -l"
alias la="ls --all"
alias lla="ll --all"
alias l1="ls -1"
alias trea="tree -a"

# Check if `nvim` command exists and create aliases accordingly
if command -v nvim >/dev/null 2>&1; then
	alias nvimt="nvim +EditTodo"
	alias nvimb="nvim +EditBookmarks"
	alias nvimr="nvim +EditReadinglist"
	alias nvimd="nvim +EditDailynote"
fi

# Check if `dust` command exists and create an alias accordingly
if command -v dust >/dev/null 2>&1; then
	alias dust="dust --reverse"
fi

# Check if `trash` command exists and create aliases accordingly
if command -v trash >/dev/null 2>&1; then
	alias dl="trash -r"
	alias rm="echo 'rm is dangerous; use dl instead. (Given args:'"
fi

# Check if `neomutt` command exists and create an alias accordingly
if command -v neomutt >/dev/null 2>&1; then
	alias mutt="cd $XDG_CACHE_HOME/neomutt && env TERM=screen-256color neomutt && cd -"
fi

# Modify `sudo` command if it exists
if command -v sudo >/dev/null 2>&1; then
	alias sudo="sudo -A"
fi

# Store wget-hsts in $XDG_CACHE_HOME
if command -v wget >/dev/null 2>&1; then
	alias wget="wget --hsts-file=$XDG_CACHE_HOME/wget-hsts"
fi

# Check if `fd` command exists and create an alias accordingly
if command -v fd >/dev/null 2>&1; then
	alias fd="fd --hidden --exclude .git/"
fi

# Alias `python` to `python3` if `python3` command exists
if command -v python3 >/dev/null 2>&1; then
	alias python="python3"
fi

# Alias `pip` to `pip3` if `pip3` command exists
if command -v pip3 >/dev/null 2>&1; then
	alias pip="pip3"
fi

# Check if `lnks` command exists and create aliases accordingly
if command -v lnks >/dev/null 2>&1; then
	lnks_dir="$HOME/docs/__bookmarks"
	alias lnks="lnks --dir $lnks_dir"
	alias lnks_chrome="lnks --dir $lnks_dir/chrome"
fi

# Platform-specific aliases for Linux
if [ "$(uname)" = "Linux" ]; then
	alias pbcopy="xsel --clipboard --input"
	alias pbpaste="xsel --clipboard --output"
	alias open="xdg-open"
fi

# alias (End) }}}

# External applications (Start) {{{

# Zoxide initialization
if command -v zoxide >/dev/null 2>&1; then
	eval "$(zoxide init --cmd c zsh)"
fi

# External applications (End) }}}

# Options (Start) {{{

# Emacs keybindings
bindkey -e

bindkey \^U backward-kill-line

cmd_to_clip () { echo -n $BUFFER | pbcopy }
zle -N cmd_to_clip
bindkey '^X' cmd_to_clip

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^[e" edit-command-line


bindkey -M isearch "^[" send-break

# zmodload zsh/complist
bindkey -M menuselect "^[" send-break

# Save history
HISTSIZE=10000
SAVEHIST=10000

# Escape without lag
KEYTIMEOUT=1

# Incasesensitive completion
zstyle ":completion:*" matcher-list "m:{a-zA-Z}={A-Za-z}"

# Options (End) }}}

# Path (Start) {{{

# Local variable to hold the brew path
brew_path=""

# Set brew path based on operating system
if [ "$(uname)" = "Darwin" ]; then
	brew_path="/opt/homebrew/bin/brew"
elif [ "$(uname)" = "Linux" ]; then
	brew_path="/home/linuxbrew/.linuxbrew/bin/brew"
fi

# If brew_path is executable, execute its shell environment setup
if [ -x "$brew_path" ]; then
	eval "$($brew_path shellenv)"
	export PATH="$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH"
fi

# Create local bin directory if it does not exist
if [ ! -d "$LOCAL_BIN_PATH" ]; then
	mkdir -p "$LOCAL_BIN_PATH"
fi

# Add paths to the PATH environment variable
export PATH="$LOCAL_BIN_PATH:$PATH"
export PATH="$XDG_DATA_HOME/node_bin/node_modules/.bin:$PATH"

# Path (End) }}}

# Plugins (Start) {{{

plug_home=$XDG_DATA_HOME/zsh/plugins
if [ ! -e $plug_home ]; then
	mkdir --parents "$plug_home"
fi

# Pure (prompt theme)
pure="$plug_home/pure"
if [ ! -d "$pure" ]; then
	git clone https://github.com/sindresorhus/pure.git "$pure"
fi
fpath+="$pure"
autoload -U promptinit; promptinit
prompt pure
zstyle :prompt:pure:git:stash show yes

# Zsh-syntax-highlighting
syntax_highlighting="$plug_home/zsh-syntax-highlighting"
if [ ! -d "$syntax_highlighting" ]; then
	git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$syntax_highlighting"
fi
source "$syntax_highlighting/zsh-syntax-highlighting.zsh"

# Zsh-autosuggestions (Show ghost text based on history)
autosuggestions="$plug_home/zsh-autosuggestions"
if [ ! -d "$autosuggestions" ]; then
	git clone https://github.com/zsh-users/zsh-autosuggestions "$autosuggestions"
fi
source "$autosuggestions/zsh-autosuggestions.zsh"

# history-search-multi-word
hsmw="$plug_home/history-search-multi-word"
if [ ! -d "$hsmw" ]; then
	git clone https://github.com/zdharma-continuum/history-search-multi-word.git "$hsmw"
fi
source "$hsmw/history-search-multi-word.plugin.zsh"

# Zsh-completions
completions="$plug_home/zsh-completions"
if [ ! -d "$completions" ]; then
	git clone https://github.com/zsh-users/zsh-completions.git "$completions"
fi
fpath+="$completions/src"

# Plugins (End) }}}
